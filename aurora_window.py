from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QLineEdit, QPushButton, QLabel, QMainWindow, QSizePolicy
)
from PySide6.QtGui import QPixmap
from PySide6.QtCore import Qt
import subprocess
import re
from datetime import datetime
import json


from prompts import (
    PERSONALITY_PROMPT,
    PLANNING_PHASE_PROMPT,
    MEMORY_PROMPT,
    TOOLS_PROMPT,
    PLANNING_EXAMPLES_PROMPT,
    FINAL_RESPONSE_PHASE_PROMPT,
    FINAL_EXAMPLES_PROMPT
)

MOOD_IMAGES = {
    "neutral": "mood_pic/neutral.png",
    "sad": "mood_pic/sad.png",
    "happy": "mood_pic/happy.png",
    "angry": "mood_pic/angry.png",
    "confused": "mood_pic/confused.png",
    "curious": "mood_pic/curious.png",
    "excited": "mood_pic/excited.png",
    "shy": "mood_pic/shy.png",
    "determined": "mood_pic/determined.png",
    "playful": "mood_pic/playful.png",
    "surprised": "mood_pic/surprised.png",
}

APP_MAPPING = {
    "calculator": "calc.exe",
    "cmd": ["cmd.exe", "/c", "start", "cmd.exe"],
    "windows_settings": ["start", "ms-settings:"],
    "notepad": "notepad.exe",
}

class MainWindow(QMainWindow):
    def __init__(self, client, mongodb, chroma_memory):
        super().__init__()
        
        self.client = client
        self.mongodb = mongodb
        self.chroma_memory = chroma_memory

        self.setWindowTitle("–ê–≤—Ä–æ—Ä–∞")
        self.resize(850, 700)

        self.setup_ui()
        self.set_mood("neutral")

    def setup_ui(self):
        # 1. –°–æ–∑–¥–∞—ë–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # 2. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å layout –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –Ω–∞ central_widget
        main_layout = QHBoxLayout(central_widget)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫–∞
        self.aurora_pic = QLabel()
        self.aurora_pic.setAlignment(Qt.AlignCenter)
        self.aurora_pic.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.aurora_pic.setMinimumSize(200, 200)
        self.aurora_pic.setScaledContents(True)

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî —á–∞—Ç
        chat_layout = QVBoxLayout()

        self.chat_window = QTextEdit(readOnly=True)
        chat_layout.addWidget(self.chat_window)

        entry_layout = QHBoxLayout()
        self.entry_field = QLineEdit()
        self.entry_field.returnPressed.connect(self.on_send_message)
        entry_layout.addWidget(self.entry_field)

        self.send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        self.send_button.clicked.connect(self.on_send_message)
        entry_layout.addWidget(self.send_button)

        self.clear_db_button = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_db_button.clicked.connect(lambda: self.mongodb.delete_all_records(self.mongodb.phrases))
        entry_layout.addWidget(self.clear_db_button)

        chat_layout.addLayout(entry_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout.addWidget(self.aurora_pic, 1)  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–µ–≤–∞
        main_layout.addLayout(chat_layout, 1)     # —á–∞—Ç —Å–ø—Ä–∞–≤–∞

    def on_send_message(self):
        self.user_request = self.entry_field.text().strip()
        if not self.user_request:
            return

        # === –õ–û–ì: –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ===
        print(f"\n{'='*60}")
        print(f"üì® –ù–û–í–´–ô –ó–ê–ü–†–û–°")
        print(f"{'='*60}")
        print(f"üìù '{self.user_request}'")

        self.chat_window.append(f"–¢—ã: {self.user_request}")
        self.mongodb.add_record(
            self.mongodb.phrases,
            {"role": "user", "content": self.user_request, "timestamp": datetime.now()}
        )
        self.entry_field.clear()

        # === –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ===
        dialogue_history = self.mongodb.get_n_records(self.mongodb.phrases, 30)
        print(f"\nüìå –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(dialogue_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        # === –§–ê–ó–ê 1: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ===
        planning_system_prompt = self.build_planning_system_prompt(self.user_request)
        messages = [{"role": "system", "content": planning_system_prompt}]
        for msg in reversed(dialogue_history):
            messages.append({"role": msg["role"], "content": msg["content"]})

        print(f"\nüß† ‚Üí –ó–ê–ü–†–û–° –ö –ú–û–î–ï–õ–ò (–§–ê–ó–ê 1)")
        planning_answer = self.client.chat_completion(
            model="deepseek/deepseek-chat-v3-0324:free",
            messages=messages
        )

        if isinstance(planning_answer, str):
            print(f"‚ùå –û–®–ò–ë–ö–ê API: {planning_answer}")
            self.chat_window.append("–ê–≤—Ä–æ—Ä–∞: –£ –º–µ–Ω—è —Å–±–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        # === –í—ã–≤–æ–¥ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ñ–∞–∑—ã 1 ===
        print(f"\nüîç ‚Üê –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò (–§–ê–ó–ê 1) ‚Äî –°–´–†–û–ô JSON")
        print(json.dumps(planning_answer, ensure_ascii=False, indent=2))

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ + –ª–æ–≥)
        if planning_answer.get("add_user_preference"):
            print(f"üíæ –°–û–•–†–ê–ù–Ø–Æ –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–ï: {planning_answer['add_user_preference']['preference']}")
            self.add_user_preference(planning_answer["add_user_preference"])

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤ ‚Äî –≤—ã–≤–æ–¥–∏–º
        if not planning_answer.get("requires_follow_up"):
            print(f"üü¢ –§–ê–ó–ê 1: –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤, –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –Ω–µ –Ω—É–∂–µ–Ω")
            self.render_and_store(planning_answer)
            return

        # === –§–ê–ó–ê 2: –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ ===
        print(f"\nüîÑ –ü–ï–†–ï–•–û–î –ö –§–ê–ó–ï 2")
        final_system_prompt = self.build_final_system_prompt(
            self.user_request,
            planning_answer.get("requires_tool_result"),
            planning_answer.get("tool"),
            planning_answer.get("tool_arguments"),
            planning_answer.get("memory_query"),
            planning_answer.get("requires_memory"),
            planning_answer.get("thoughts"),
        )

        messages = [{"role": "system", "content": final_system_prompt}]
        for msg in reversed(dialogue_history):
            messages.append({"role": msg["role"], "content": msg["content"]})
        messages.append({
            "role": "assistant",
            "content": json.dumps(planning_answer, ensure_ascii=False)
        })

        print(f"\nüß† ‚Üí –ó–ê–ü–†–û–° –ö –ú–û–î–ï–õ–ò (–§–ê–ó–ê 2)")
        final_answer = self.client.chat_completion(
            model="deepseek/deepseek-chat-v3-0324:free",
            messages=messages
        )

        if isinstance(final_answer, str):
            print(f"‚ùå –û–®–ò–ë–ö–ê API (—Ñ–∞–∑–∞ 2): {final_answer}")
            self.chat_window.append("–ê–≤—Ä–æ—Ä–∞: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
            return

        # === –í—ã–≤–æ–¥ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ñ–∞–∑—ã 2 ===
        print(f"\nüîç ‚Üê –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò (–§–ê–ó–ê 2) ‚Äî –°–´–†–û–ô JSON")
        print(json.dumps(final_answer, ensure_ascii=False, indent=2))

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if final_answer.get("add_user_preference"):
            print("‚ö†Ô∏è  –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–µ—Ä–≤–æ–π —Ñ–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é –≤—Ç–æ—Ä—É—é.")

        # –í—ã–≤–æ–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        print(f"üì§ –í–´–í–û–ñ–£ –û–¢–í–ï–¢ –í –ß–ê–¢")
        self.render_and_store(final_answer)

    def render_and_store(self, aurora_answer: dict):
        cleaned_final_answer = re.sub(
            r'<think>.*?</think>', '', aurora_answer.get("final_answer", ""), flags=re.DOTALL
        ).strip() or "[–ø—É—Å—Ç–æ]"

        self.chat_window.append(f"–ê–≤—Ä–æ—Ä–∞: {cleaned_final_answer}")

        mood = aurora_answer.get("mood", "neutral")
        self.set_mood(mood)

        tool = aurora_answer.get("tool")
        if tool and tool != "none":
            self.execute_tool(tool, aurora_answer.get("tool_arguments", {}))

        record_data = {
            "role": "assistant",
            "content": cleaned_final_answer,
            "mood": mood,
            "timestamp": datetime.now()
        }
        if "add_user_preference" in aurora_answer:
            record_data["add_user_preference"] = aurora_answer["add_user_preference"]

        self.mongodb.add_record(self.mongodb.phrases, record_data)
        self.chat_window.ensureCursorVisible()

    def add_user_preference(self, pref):
        if not pref:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")
            return
        
        preference_text = pref.get("preference")
        category = pref.get("category")
        importance = pref.get("importance")

        if not preference_text or not category or not importance:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")
            return

        # 1. –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ Chroma ‚Üí –æ–Ω —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç
        success = self.chroma_memory.add_record(
            text=preference_text,
            category=category,
            importance=importance
        )

        # 2. –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Chroma ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ MongoDB
        if success is not False:  # add_record –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–µ
            try:
                self.mongodb.add_record(
                    self.mongodb.user_preferences,
                    {
                        "text": preference_text,
                        "category": category,
                        "importance": importance,
                        "timestamp": datetime.now()
                    }
                )
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ MongoDB: {preference_text}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ MongoDB: {e}")
        else:
            print(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞—é MongoDB: –¥—É–±–ª–∏–∫–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ‚Äî {preference_text}")

    def build_planning_system_prompt(self, user_request):
        last_user_message_time = self.get_last_user_message_time()
        time_info = "–¢—ã –Ω–µ –ø–æ–º–Ω–∏—à—å, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
        if last_user_message_time:
            elapsed = datetime.now() - last_user_message_time
            hours, rem = divmod(int(elapsed.total_seconds()), 3600)
            minutes = rem // 60
        
        if elapsed.total_seconds() < 120:
            time_info = "–ê–Ω–¥—Ä–µ–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–∏—Å–∞–ª —Ç–µ–±–µ."
        elif hours == 0:
            time_info = f"–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ê–Ω–¥—Ä–µ—è –ø—Ä–æ—à–ª–æ {minutes} –º–∏–Ω—É—Ç."
        elif hours < 24:
            time_info = f"–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ê–Ω–¥—Ä–µ—è –ø—Ä–æ—à–ª–æ {hours} —á {minutes} –º–∏–Ω."
        else:
            time_info = f"–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—Ä–æ—à–ª–æ {elapsed.days} –¥–Ω."

        time_info += f"–í—Ä–µ–º—è —Å–µ–π—á–∞—Å: {datetime.now().strftime('%d.%m.%y %H:%M')}. –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ (–≤—Ä–µ–º—è —Å–µ–π—á–∞—Å –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä –º–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏–¥—Ç–∏ —Å–ø–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ –ø–æ–∑–¥–Ω–æ, –∏–ª–∏ –ø–æ–∂–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞)."

        critical_prefs = self.chroma_memory.get_critical_memories()
        # context_prefs = self.chroma_memory.search_memory(user_request, 4)

        prompt_parts = [
            PERSONALITY_PROMPT,
            PLANNING_PHASE_PROMPT,
            time_info,
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–µ–±–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è:",
            "\n".join(map(str, critical_prefs)) if critical_prefs else "–Ω–∏—á–µ–≥–æ.",
            # "–¢–∞–∫–∂–µ –≤ —Ç–≤–æ–µ–π –ø–∞–º—è—Ç–∏ –ø–æ–¥ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ—Ä–∞–∑—É –ê–Ω–¥—Ä–µ—è —Ç—ã –Ω–∞—à–ª–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            # "\n".join(map(str, context_prefs)) if context_prefs else "–Ω–∏—á–µ–≥–æ.",
            MEMORY_PROMPT,
            TOOLS_PROMPT,
            PLANNING_EXAMPLES_PROMPT
        ]
        print(time_info)
        # print("\n\n".join(prompt_parts))
        return "\n\n".join(prompt_parts)
    
    def build_final_system_prompt(self, user_request, requires_tool_result, tool, tool_arguments, memory_query, requires_memory, thoughts):
        last_user_message_time = self.get_last_user_message_time()
        if last_user_message_time:
            elapsed = datetime.now() - last_user_message_time
            hours, rem = divmod(int(elapsed.total_seconds()), 3600)
            minutes = rem // 60

            if elapsed.total_seconds() < 120:
                time_info = "–ê–Ω–¥—Ä–µ–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–∏—Å–∞–ª —Ç–µ–±–µ."
            elif hours == 0:
                time_info = f"–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ê–Ω–¥—Ä–µ—è –ø—Ä–æ—à–ª–æ {minutes} –º–∏–Ω—É—Ç."
            elif hours < 24:
                time_info = f"–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ê–Ω–¥—Ä–µ—è –ø—Ä–æ—à–ª–æ {hours} —á {minutes} –º–∏–Ω."
            else:
                time_info = f"–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—Ä–æ—à–ª–æ {elapsed.days} –¥–Ω."
        else:
            time_info = "–¢—ã –Ω–µ –ø–æ–º–Ω–∏—à—å, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

        time_info += f"–í—Ä–µ–º—è —Å–µ–π—á–∞—Å: {datetime.now().strftime('%d.%m.%y %H:%M')}. –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ (–≤—Ä–µ–º—è —Å–µ–π—á–∞—Å –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä –º–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏–¥—Ç–∏ —Å–ø–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ –ø–æ–∑–¥–Ω–æ, –∏–ª–∏ –ø–æ–∂–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞)."

        critical_prefs = self.chroma_memory.get_critical_memories()

        prompt_parts = [
            PERSONALITY_PROMPT,
            time_info,
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–µ–±–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è:",
            "\n".join(map(str, critical_prefs)) if critical_prefs else "–Ω–∏—á–µ–≥–æ.",
            FINAL_RESPONSE_PHASE_PROMPT,
            f"–ê–Ω–¥—Ä–µ–π —Å–∫–∞–∑–∞–ª: {user_request}.",
            f"–¢–≤–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–π —Ñ–∞–∑–µ: '{thoughts}'",
            f"–ù–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
        ]

        if requires_memory:
            context_prefs = self.chroma_memory.search_memory(memory_query, 10)
            prompt_parts.append(
                "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Ñ—Ä–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—à–µ–ª —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ –ê–≤—Ä–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –∫ —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n" +
                "\n".join(map(str, context_prefs)) if context_prefs else "–Ω–∏—á–µ–≥–æ."
            )
        if requires_tool_result:
            result = self.execute_tool(tool, tool_arguments)
            prompt_parts.append(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool}: {result}")
        
        prompt_parts.extend([
            FINAL_EXAMPLES_PROMPT
        ])

        # print("\n\n".join(prompt_parts))

        return "\n\n".join(prompt_parts)
    
    def get_last_user_message_time(self):
        recent_messages = self.mongodb.get_n_records(self.mongodb.phrases, 5)
        
        for msg in recent_messages:
            if msg.get("role") == "user" and "timestamp" in msg:
                return msg["timestamp"]
        
        return None
    
    def set_mood(self, mood: str):
        image_path = MOOD_IMAGES.get(mood.lower(), MOOD_IMAGES["neutral"])
        pixmap = QPixmap(image_path)
        if not pixmap.isNull():
            self.aurora_pic.setPixmap(pixmap)
    
    def execute_tool(self, tool: str, args):
        if tool == "open_app":
            app_name = args.get("app_name")
            if app_name:
                self.open_app(app_name)
                return f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –æ—Ç–∫—Ä—ã–ª–æ—Å—å!"

    def open_app(self, name: str):
        cmd = APP_MAPPING.get(name.lower())
        if cmd:
            subprocess.Popen(cmd, shell=(name == "windows_settings"))